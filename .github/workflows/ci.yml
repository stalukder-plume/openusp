name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.21'
  REGISTRY: docker.io
  DOCKER_REPO_PREFIX: stalukder-plume/openusp

jobs:
  # ================================================================================================
  # CODE QUALITY & TESTING
  # ================================================================================================
  
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for version detection

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: make test

      - name: Run linting
        run: make lint

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not properly formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Security scan
        uses: securecodewarrior/github-action-add-sarif@v1
        if: false  # Enable when you have SARIF reports
        with:
          sarif-file: 'results.sarif'

  # ================================================================================================
  # BUILD BINARIES
  # ================================================================================================

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build binaries
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          make build-all
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/bin/
          retention-days: 7

  # ================================================================================================
  # DOCKER BUILD & TEST
  # ================================================================================================

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.version.outputs.version }}
      commit: ${{ steps.version.outputs.commit }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version information
        id: version
        run: |
          if [[ $GITHUB_REF_TYPE == "tag" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev-$(date +%Y%m%d)")
          fi
          COMMIT=$(git rev-parse --short HEAD)
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Commit: $COMMIT"

      - name: Build Docker images (test)
        run: |
          chmod +x scripts/docker-release.sh
          ./scripts/docker-release.sh ${{ steps.version.outputs.version }} --dry-run

      - name: Test Docker images
        run: |
          # Build images for testing (without pushing)
          ./scripts/docker-release.sh ${{ steps.version.outputs.version }}
          
          # Basic smoke tests
          docker run --rm $DOCKER_REPO_PREFIX-controller:${{ steps.version.outputs.version }} --version || true
          docker run --rm $DOCKER_REPO_PREFIX-apiserver:${{ steps.version.outputs.version }} --version || true
          docker run --rm $DOCKER_REPO_PREFIX-cli:${{ steps.version.outputs.version }} --version || true

  # ================================================================================================
  # DOCKER REGISTRY PUSH
  # ================================================================================================

  docker-push:
    name: Push Docker Images
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.event_name != 'pull_request'  # Only push on main/develop/tags
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version information
        id: version
        run: |
          if [[ $GITHUB_REF_TYPE == "tag" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev-$(date +%Y%m%d)")
          fi
          COMMIT=$(git rev-parse --short HEAD)
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT

      - name: Build and push Docker images
        run: |
          chmod +x scripts/docker-release.sh
          ./scripts/docker-release.sh ${{ steps.version.outputs.version }} --push

      - name: Update Docker Hub descriptions
        uses: peter-evans/dockerhub-description@v3
        continue-on-error: true
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ env.DOCKER_REPO_PREFIX }}-controller
          readme-filepath: ./README.md

  # ================================================================================================
  # RELEASE ASSETS (for GitHub releases)
  # ================================================================================================

  release-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: [build, docker-push]
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Package binaries by platform
          for dir in artifacts/binaries-*; do
            platform=$(basename "$dir" | sed 's/binaries-//')
            tar -czf "release-assets/openusp-${platform}.tar.gz" -C "$dir" .
          done
          
          # Create checksums
          cd release-assets
          sha256sum *.tar.gz > checksums.txt

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-assets/*.tar.gz
            release-assets/checksums.txt
          body: |
            ## OpenUSP Release ${{ github.ref_name }}
            
            ### Docker Images
            - `stalukder-plume/openusp-controller:${{ github.ref_name }}`
            - `stalukder-plume/openusp-apiserver:${{ github.ref_name }}`
            - `stalukder-plume/openusp-cli:${{ github.ref_name }}`
            - `stalukder-plume/openusp-cwmpacs:${{ github.ref_name }}`
            
            ### Binary Downloads
            Download pre-compiled binaries for your platform from the assets below.
            
            ### Verification
            Verify downloads using the provided `checksums.txt` file:
            ```bash
            sha256sum -c checksums.txt
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ================================================================================================
  # DEPLOYMENT (if needed)
  # ================================================================================================

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-push
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          echo "Version: ${{ needs.docker-build.outputs.version }}"
          # Add your staging deployment commands here
          # Example: kubectl, docker-compose, Terraform, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-push
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production environment..."
          echo "Version: ${{ github.ref_name }}"
          # Add your production deployment commands here