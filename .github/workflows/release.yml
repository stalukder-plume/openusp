name: Release Management

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - prerelease
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean

jobs:
  validate-version:
    name: Validate Release Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      is_prerelease: ${{ steps.validate.outputs.is_prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Validate semantic version format
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: vMAJOR.MINOR.PATCH (e.g., v1.2.3)"
            echo "Pre-release: v1.2.3-alpha.1, v1.2.3-beta.1, v1.2.3-rc.1"
            exit 1
          fi
          
          # Check if tag already exists
          if git tag | grep -q "^$VERSION$"; then
            echo "❌ Tag $VERSION already exists"
            exit 1
          fi
          
          # Determine if this is a pre-release
          IS_PRERELEASE="false"
          if [[ $VERSION =~ -[a-zA-Z] ]] || [[ "${{ github.event.inputs.release_type }}" == "prerelease" ]]; then
            IS_PRERELEASE="true"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "✅ Version $VERSION is valid"
          echo "   Pre-release: $IS_PRERELEASE"

  create-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    needs: validate-version
    outputs:
      commit_sha: ${{ steps.tag.outputs.commit_sha }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag
        id: tag
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          COMMIT_SHA=$(git rev-parse HEAD)
          
          # Create annotated tag
          git tag -a "$VERSION" -m "Release $VERSION"
          
          # Push tag
          git push origin "$VERSION"
          
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "✅ Created and pushed tag $VERSION"

  build-and-test:
    name: Build & Test Release
    runs-on: ubuntu-latest
    needs: [validate-version, create-tag]
    
    steps:
      - name: Checkout release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-version.outputs.version }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run tests
        run: make test

      - name: Build all binaries
        run: make build-all

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-binaries
          path: build/bin/
          retention-days: 30

  docker-release:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [validate-version, create-tag, build-and-test]
    
    steps:
      - name: Checkout release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-version.outputs.version }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          chmod +x scripts/docker-release.sh
          ./scripts/docker-release.sh ${{ needs.validate-version.outputs.version }} --push

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-version, create-tag, build-and-test, docker-release]
    
    steps:
      - name: Checkout release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-version.outputs.version }}
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-binaries
          path: ./release-assets

      - name: Prepare release assets
        run: |
          cd release-assets
          
          # Create platform-specific archives
          mkdir -p ../archives
          
          # Linux AMD64
          tar -czf ../archives/openusp-linux-amd64.tar.gz \
            openusp-controller openusp-apiserver openusp-cli openusp-cwmpacs
          
          # Create checksums
          cd ../archives
          sha256sum *.tar.gz > checksums.txt

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          
          # Get previous tag for changelog
          PREV_TAG=$(git tag --list --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -n2 | tail -n1 || echo "")
          
          echo "## OpenUSP Release $VERSION" > release_notes.md
          echo "" >> release_notes.md
          
          if [[ -n $PREV_TAG ]]; then
            echo "### Changes since $PREV_TAG" >> release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s" ${PREV_TAG}..HEAD >> release_notes.md
          else
            echo "### Initial Release" >> release_notes.md
            echo "" >> release_notes.md
            echo "This is the first release of OpenUSP." >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "### Docker Images" >> release_notes.md
          echo "" >> release_notes.md
          echo "- \`stalukder-plume/openusp-controller:$VERSION\`" >> release_notes.md
          echo "- \`stalukder-plume/openusp-apiserver:$VERSION\`" >> release_notes.md
          echo "- \`stalukder-plume/openusp-cli:$VERSION\`" >> release_notes.md
          echo "- \`stalukder-plume/openusp-cwmpacs:$VERSION\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### Docker" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "docker pull stalukder-plume/openusp-controller:$VERSION" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### Binary Download" >> release_notes.md
          echo "Download pre-compiled binaries from the assets below and verify with checksums:" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "sha256sum -c checksums.txt" >> release_notes.md
          echo "\`\`\`" >> release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-version.outputs.version }}
          name: OpenUSP ${{ needs.validate-version.outputs.version }}
          body_path: release_notes.md
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ needs.validate-version.outputs.is_prerelease }}
          files: |
            archives/*.tar.gz
            archives/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          echo "🚀 Release ${{ needs.validate-version.outputs.version }} completed successfully!"
          echo ""
          echo "📦 Assets created:"
          ls -la archives/
          echo ""
          echo "🐳 Docker images pushed:"
          echo "  - stalukder-plume/openusp-controller:${{ needs.validate-version.outputs.version }}"
          echo "  - stalukder-plume/openusp-apiserver:${{ needs.validate-version.outputs.version }}"
          echo "  - stalukder-plume/openusp-cli:${{ needs.validate-version.outputs.version }}"
          echo "  - stalukder-plume/openusp-cwmpacs:${{ needs.validate-version.outputs.version }}"